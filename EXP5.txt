a) FCFS
 #include<stdio.h>
int main()
{
int n,pid[10],burst[10],wt[10],tat[10],twt=0,ttat=0,stime=0,i;
float avgwt,avgtat;  
printf("\n Enter number of processes: ");
scanf("%d", &n);
printf("\n Enter the burst times: \n");                                            
for(i=1; i<=n; i++)
{
pid[i] = i;
printf(" P%d: ", i);
scanf("%d", &burst[i]);
wt[i] = stime;
stime=stime + burst[i];
tat[i] = stime;
}
printf("\n Gantt chart ");
printf("\n ProcessID \tBurst Time \tFrom Time \tTo Time\n");
for(i=1; i<=n; i++)
{
printf(" P%d\t\t %d\t\t %d\t\t%d\t\t\n", pid[i], burst[i], wt[i], tat[i]);
twt += wt[i];
ttat += tat[i];
}
printf("\n Total Waiting Time is %d", twt);
printf("\n Total TurnaroundTime is %d\n", ttat);
avgwt = (float)twt/n;
avgtat = (float)ttat/n;
printf("\n Average Waiting Time is %.2f", avgwt);
printf("\n Average TurnaroundTime is %.2f\n", avgtat);

b) PRIORITY 
#include<stdio.h>
int main()
{
int n, pid[10], burst[10], prio[10], wt[10], tat[10];
int i, j, temp=0, stime=0, twt=0, ttat=0;
float avgtat, avgwt;  
printf("\n Enter no: of processes: ");
scanf("%d",&n);
printf("\n Enter the burst times and priorities: \n");
 for(i=1; i<=n; i++)
{
pid[i] = i;
printf(" P%d Burst: ", i);
scanf("%d", &burst[i]); 
printf(" P%d Priority: ",i);                                                    
scanf("%d", &prio[i]);
}
for(i=1; i<=n; i++)
for(j=i+1; j<=n; j++)
if(prio[i]> prio[j])
{
temp = pid[i];
pid[i] = pid[j];
pid[j] = temp;
temp = burst[i];
burst[i] = burst[j];
 burst[j] = temp;
temp = prio[i];
prio[i] = prio[j];
prio[j] = temp;
}
printf("\nGantt Chart: ");
printf("\n ProcessID \tPriority \tBurst Time \tFrom Time To Time");
for(i=1; i<=n; i++)
{
wt[i] = stime;
stime=stime + burst[i];
tat[i] = stime;  
twt += wt[i];
ttat += tat[i];
printf("\n P%d \t\t%d \t\t%d \t\t%d \t\t%d", pid[i], prio[i], burst[i], wt[i], tat[i]);
}
printf("\n Total WaitingTime is %d", twt);
avgwt = (float)twt/n;
printf("\n Total TurnaroundTime is %d\n", ttat);
avgtat = (float)ttat/n;
printf("\nAverage Waiting time: %.2f", avgwt); printf("\nAverage Turnaround time: %.2f", avgtat);
}
c) ROUND ROBIN
#include<stdio.h>
int main()
{
int i, n, qt, tbt=0, twt=0, ttat=0;
int pid[10], burst[10], rem[10], flag[10], wt[10], tat[10];
int stime, dur;
float awt,atat;
printf("\nEnter the no. of Processes: ");
scanf("%d", &n);
printf("Enter the time slice/quantum: ");
scanf("%d", &qt);
printf("Enter the Burst times:\n");
for(i=0; i<n; i++)
{
pid[i] = i;
printf("P%d : ", i);
scanf("%d", &burst[i]);
tbt = tbt + burst[i];
rem[i] = burst[i];
flag[i] = 0;
wt[i] = tat[i] = 0;
}
stime = 0;
i = 0;
printf("\n Gantt Chart");
printf("\n ProcessID\t Burst Time\t Remaining Time\t Start Time\t End Time\n");
while(stime < tbt)
{                                                                                      
if(flag[i] == 0)
{
if(rem[i] <= qt) 
{
dur = rem[i];
tat[i] = dur + stime;
wt[i] = tat[i] - burst[i];
flag[i] = 1;
}
else
dur = qt;
printf("P%d %15d %15d %15d %15d\n",
pid[i], burst[i], rem[i], stime, stime+dur);
rem[i] = rem[i] - dur;
stime = stime + dur;
}
i = (i+1) % n;
}
printf("\n\n Process ID \t Waiting Time \t Turn Around Time");
for(i=0; i<n; i++)
{
printf("\n\tP%d \t\t%d \t\t%d", pid[i], wt[i], tat[i]);
twt = twt + wt[i];
ttat = ttat + tat[i];
}
printf("\n\nTotal Waiting Time : %d", twt);
printf("\nTotal Turn Around Time :%d", ttat);
awt = (float)twt/n;
atat = (float)ttat/n;
printf("\n\nAverage Waiting time : %.2f", awt);
printf("\nAverage Turnaround time : %.2f", atat);
}
d) SJF 
#include<stdio.h>
int main()
{
int n, pid[10], burst[10], wt[10], tat[10];
int i, j, temp=0, stime=0, twt=0, ttat=0;
float avgtat, avgwt;
printf("\n Enter no. of processes: ");
scanf("%d",&n);
printf("\n Enter the burst times: \n");
for(i=1; i<=n; i++)
{
pid[i] = i;
printf(" P%d Burst: ", i);
scanf("%d", &burst[i]);
}
for(i=1; i<=n; i++)
for(j=i+1; j<=n; j++)
if(burst[i] > burst[j])
{
temp = pid[i];
pid[i] = pid[j];
pid[j] = temp;
temp = burst[i];
burst[i] = burst[j];
burst[j] = temp;
}
printf("\nGantt Chart: ");
printf("\n ProcessID \tBurst Time \tFrom Time \tTo Time");
for(i=1; i<=n; i++)
{
wt[i] = stime;
stime = stime + burst[i];
tat[i] = stime;
twt += wt[i];
ttat += tat[i];
printf("\n P%d \t\t%d \t\t%d \t\t%d", pid[i], burst[i], wt[i], tat[i]);
}
printf("\n\n Total WaitingTime is %d", twt);
printf("\n Total TurnaroundTime is %d\n", ttat);
avgwt = (float)twt/n;
avgtat = (float)ttat/n;
printf("\nAverage Waiting time : %.2f", avgwt);
printf("\nAverage Turnaround time : %.2f", avgtat);
}
